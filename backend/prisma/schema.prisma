// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  username      String          @unique
  password      String
  files         File[]
  fastaAnalyses FastaAnalysis[]
  pcrAnalyses   PcrAnalysis[]
  fastqAnalyses FastqAnalysis[]

  InviteCode InviteCode? @relation("InviteCodeToUser")
}

enum FileCategory {
  GENOMIC
  PRIMER
  FASTQ
  PCR
}

enum DeletionReason {
  NONE
  LIFECYCLE   // deleted by S3 lifecycle
  USER        // user-initiated
  ADMIN       // admin/moderation
  MISSING     // S3 said it's gone but we didn't request it (drift)
}

model File {
  id         Int          @id @default(autoincrement())
  filename   String
  path       String       @unique
  category   FileCategory
  uploadedAt DateTime     @default(now())
  userId     Int
  user       User         @relation(fields: [userId], references: [id])

  //- soft-delete fields
  deletedAt       DateTime?
  deletionReason  DeletionReason  @default(NONE)

  //- optional S3 metadata to aid reconciliation/dedup/debug
  s3Bucket    String?
  s3Key       String?
  etag        String?
  sizeBytes   BigInt?

  // FASTA 1:1
  fastaAnalysis FastaAnalysis? @relation("FastaFile")

  // FASTQ outputs (paired) 1:1 each
  fastqAnalysisR1 FastqAnalysis? @relation("FastqFileR1")
  fastqAnalysisR2 FastqAnalysis? @relation("FastqFileR2")

  // Fastq uses PCR file as input — backref from FastqAnalysis.pcrFile
  usedForFastq FastqAnalysis[] @relation("FastqFromPcr")

  // PCR output — backref from PcrAnalysis.pcrFile
  producedByPcr PcrAnalysis? @relation("PcrOutputFile")

  // PCR inputs — backrefs from PcrAnalysis.primerFile / referenceFile
  usedAsPrimerInPcr    PcrAnalysis[] @relation("PcrPrimerFile")
  usedAsReferenceInPcr PcrAnalysis[] @relation("PcrReferenceFile")

  @@unique([filename, userId])
}

model FastaAnalysis {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  fastaFile   File @relation("FastaFile", fields: [fastaFileId], references: [id], onDelete: Cascade)
  fastaFileId Int  @unique

  result    String
  createdAt DateTime @default(now())

  @@unique([userId, fastaFileId])
}

model PcrAnalysis {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  pcrAnalysisName String
  cyclesCount     Int

  // One analysis -> one PCR output file
  pcrFile     File?  @relation("PcrOutputFile", fields: [pcrFileId], references: [id], onDelete: Cascade)
  pcrFileId   Int?   @unique
  pcrFilename String

  // Inputs (still stored here)
  primerFile     File?  @relation("PcrPrimerFile", fields: [primerFileId], references: [id], onDelete: SetNull)
  primerFileId   Int?
  primerFilename String

  referenceFile     File?  @relation("PcrReferenceFile", fields: [referenceFileId], references: [id], onDelete: SetNull)
  referenceFileId   Int?
  referenceFilename String

  result    String
  createdAt DateTime @default(now())

  @@unique([userId, primerFileId, referenceFileId, pcrAnalysisName, cyclesCount])
}

model FastqAnalysis {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int

  analysisName  String
  sampleName    String
  sequenceCount Int

  // Paired FASTQ outputs
  fastqFileR1   File @relation("FastqFileR1", fields: [fastqFileR1Id], references: [id], onDelete: Cascade)
  fastqFileR1Id Int  @unique

  fastqFileR2   File @relation("FastqFileR2", fields: [fastqFileR2Id], references: [id], onDelete: Cascade)
  fastqFileR2Id Int  @unique

  // If FASTQ came from a PCR output file:
  pcrFileId   Int?
  pcrFile     File?  @relation("FastqFromPcr", fields: [pcrFileId], references: [id], onDelete: SetNull)
  pcrFilename String

  result      String
  createdAt   DateTime @default(now())
  deletedAt   DateTime?

  @@unique([userId, sampleName, pcrFileId, sequenceCount, analysisName])
}

model InviteCode {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  usedBy    User?    @relation("InviteCodeToUser", fields: [usedById], references: [id])
  usedById  Int?     @unique
}
