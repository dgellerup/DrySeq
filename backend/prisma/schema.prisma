// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  username          String    @unique
  password          String
  files             File[]
  fastaAnalyses     FastaAnalysis[]
  fastqAnalyses     FastqAnalysis[]
}

enum FileCategory {
  GENOMIC
  PRIMER 
  FASTQ 
}

model File {
  id                  Int             @id @default(autoincrement())
  filename            String          @unique
  path                String
  category            FileCategory
  uploadedAt          DateTime        @default(now())
  userId              Int
  user                User            @relation(fields: [userId], references: [id])
  metadata            Metadata[]

  // Relations for different analysis types
  primerAnalyses      FastaAnalysis[] @relation("PrimerFile")
  referenceAnalyses   FastaAnalysis[] @relation("ReferenceFile")
  fastqAnalyses       FastqAnalysis[] @relation("FastqFile")
}

model Metadata {
  id          Int       @id @default(autoincrement())
  file        File      @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      Int       @unique
  key         String
  value       String

  @@unique([fileId, key])
}

model FastaAnalysis {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int

  primerFile      File      @relation("PrimerFile", fields: [primerFileId], references: [id], onDelete: Cascade)
  primerFileId    Int

  referenceFile   File      @relation("ReferenceFile", fields: [referenceFileId], references: [id], onDelete: Cascade)
  referenceFileId Int

  result          String
  createdAt       DateTime  @default(now())

  @@unique([userId, primerFileId, referenceFileId]) // prevents duplicate runs
}

model FastqAnalysis {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
  fastqFile       File      @relation("FastqFile", fields: [fastqFileId], references: [id], onDelete: Cascade)
  fastqFileId     Int
  sequenceCount   Int
  result          String
  createdAt       DateTime  @default(now())
}