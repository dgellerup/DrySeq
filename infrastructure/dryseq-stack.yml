# To deploy:
# aws cloudformation deploy \
#   --template-file dryseq-stack.yml \
#   --stack-name dryseq-stack \
#   --capabilities CAPABILITY_NAMED_IAM \
#   --parameter-overrides \
#       KeyPairName=my-key \
#       VPC=vpc-id \
#   --profile personal

AWSTemplateFormatVersion: '2010-09-09'
Description: DrySeq Infra - Frontend, Uploads, EC2 backend, RDS DB

Parameters:
  Stage:
    Type: String
    AllowedValues: [dev, prod]
    Default: dev

  AdminCidrIp:
    Type: String
    Default: 0.0.0.0/0
    Description: Your IP/CIDR for SSH (e.g., 203.0.113.10/32)

  KeyPairName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: User your default VPC or a specific one

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet for EC2 instance

  DbPrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two subnets in different AZs for RDS

  AL2023Ami:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  UseExistingBuckets:
    Type: String
    AllowedValues: [true, false]
    Default: false
    Description: If true, do not create S3 buckets; use the names below.

  ExistingFrontendBucketName:
    Type: String
    Default: ""
    Description: Name of an existing Frontend bucket (required if UseExistingBuckets=true)

  ExistingUploadsBucketName:
    Type: String
    Default: ""
    Description: Name of an existing Uploads bucket (required if UseExistingBuckets=true)

Mappings:
  StageConfig:
    dev:
      DbInstanceClass: db.t3.micro
      AllocatedStorage: "20"
      BackupRetention: "1"
      DeletionProtection: "false"
    prod:
      DbInstanceClass: db.t3.micro
      AllocatedStorage: "50"
      BackupRetention: "7"
      DeletionProtection: "true"

Conditions:
  CreateBuckets: !Equals [ !Ref UseExistingBuckets, "false"]

Resources:

  # === Secrets ===

  DrySeqDbMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "dryseq/db/${Stage}"
      GenerateSecretString:
        SecretStringTemplate: '{"username":"dryseqadmin"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludePunctuation: true

  # === Subnets ===

  DrySeqDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DrySeq private DB subnets"
      SubnetIds: !Ref DbPrivateSubnetIds

  # === S3 Buckets ===

  FrontendBucket:
    Condition: CreateBuckets
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dryseq-frontend-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Condition: CreateBuckets
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"

  UploadsBucket:
    Condition: CreateBuckets
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dryseq-userdata-${AWS::AccountId}-${AWS::Region}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT]
            AllowedOrigins: ["*"]
            AllowedHeaders: ["*"]
            MaxAge: 3000

  # === IAM Role for EC2 ===

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "dryseq-${Stage}-ec2-role"   # <â€” add Stage here
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DrySeqUserdataAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # S3 access (replace hardcoded ARNs with !If)
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:AbortMultipartUpload
                  - s3:ListBucket
                Resource:
                  - !If
                    - CreateBuckets
                    - !Sub "${UploadsBucket.Arn}"
                    - !Sub "arn:aws:s3:::${ExistingUploadsBucketName}"
                  - !If
                    - CreateBuckets
                    - !Sub "${UploadsBucket.Arn}/*"
                    - !Sub "arn:aws:s3:::${ExistingUploadsBucketName}/*"
              # Secrets / SSM / KMS / CFN / RDS (unchanged)
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dryseq/*"
              - Effect: Allow
                Action: [ ssm:GetParameter, ssm:GetParameters ]
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dryseq/*"
              - Effect: Allow
                Action: [ kms:Decrypt ]
                Resource: "*"
                Condition: { StringEquals: { kms:ViaService: !Sub "ssm.${AWS::Region}.amazonaws.com" } }
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResources
                  - cloudformation:ListStackResources
                Resource: "*"
              - Effect: Allow
                Action: [ rds:DescribeDBInstances ]
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # === Parameter Groups ===

  DrySeqDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for DrySeq Postgres17 DB
      Family: postgres17
      Parameters:
        log_min_messages: error

  # === Security Groups ===

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "DrySeq ${Stage} API SG"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AdminCidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres from EC2
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # === RDS PostgreSQL ===

  DrySeqDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: dryseq
      Engine: postgres
      EngineVersion: "17.5"
      MasterUsername: dryseqadmin
      MasterUserPassword: !Sub "{{resolve:secretsmanager:dryseq/db/${Stage}:SecretString:password}}"
      DBInstanceClass: !FindInMap [StageConfig, !Ref Stage, DbInstanceClass]
      AllocatedStorage: !FindInMap [StageConfig, !Ref Stage, AllocatedStorage]
      BackupRetentionPeriod: !FindInMap [StageConfig, !Ref Stage, BackupRetention]
      DeletionProtection: !FindInMap [StageConfig, !Ref Stage, DeletionProtection]
      StorageType: gp3
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DrySeqDbSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBParameterGroupName: !Ref DrySeqDBParameterGroup

  # === EC2 Instance ===

  DrySeqBackend:
    Type: AWS::EC2::Instance
    Metadata:
      UpdateMessage: "DrySeqBackend v0.0.2"
    Properties:
      InstanceType: t3.micro
      SubnetId: !Ref SubnetId
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AL2023Ami # Amazon Linux 2023 AMI (us-east-1)
      UserData:
        Fn::Base64: 
          !Sub 
            - |
              #!/bin/bash
              set -euxo pipefail
              exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1

              REGION=${AWS::Region}
              STAGE=${Stage}
              BACKEND_DIR=/home/ec2-user/DrySeq/backend
              VENV_DIR="$BACKEND_DIR/.venv"
              PYTHON_BIN="$VENV_DIR/bin/python"

              # ---------- ROOT: system packages ----------
              dnf -y update
              dnf -y remove nodejs || true
              dnf -y install git python3 python3-pip jq awscli postgresql17
              curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
              dnf -y install nodejs
              npm install -g pm2

              # ---------- ec2-user: get code ----------
              runuser -l ec2-user -c '
                cd ~
                rm -rf DrySeq || true
                git clone --branch main https://github.com/dgellerup/DrySeq.git
              '

              # ---------- ROOT: fetch secrets ----------
              JWT_SECRET=$(aws ssm get-parameter \
                --name /dryseq/${Stage}/jwt/secret \
                --with-decryption \
                --query Parameter.Value \
                --output text \
                --region "$REGION")

              DB_PASS=$(aws secretsmanager get-secret-value \
                --secret-id dryseq/db/${Stage} \
                --query SecretString \
                --output text \
                --region "$REGION" | jq -r .password)

              FRONTEND_BUCKET_NAME="${FrontendBucketName}"
              USERDATA_BUCKET_NAME="${UploadsBucketName}"

              # ---------- ROOT: write .env ----------
              cat > "$BACKEND_DIR/.env" <<EOF
              DATABASE_URL=postgresql://dryseqadmin:$DB_PASS@${DrySeqDB.Endpoint.Address}:5432/dryseq?schema=public
              AWS_REGION=${AWS::Region}
              USERDATA_BUCKET=$USERDATA_BUCKET_NAME
              FRONTEND_ORIGINS=http://$FRONTEND_BUCKET_NAME.s3-website-${AWS::Region}.amazonaws.com,http://localhost:5173
              JWT_SECRET=$JWT_SECRET
              PORT=80
              PYTHON_BIN=$PYTHON_BIN
              EOF
              chown ec2-user:ec2-user "$BACKEND_DIR/.env"
              chmod 600 "$BACKEND_DIR/.env"

              # Allow node to bind to :80 (ignore if already set)
              setcap 'cap_net_bind_service=+ep' "$(readlink -f "$(command -v node)")" || true

              # ---------- ec2-user: Python venv + deps ----------
              runuser -l ec2-user -c "
                cd '$BACKEND_DIR'
                python3 -m venv .venv
                source .venv/bin/activate
                python -m pip install --upgrade pip wheel
                python -m pip install -r requirements.txt --no-cache-dir
              "

              # ---------- ec2-user: Node deps + Prisma ----------
              runuser -l ec2-user -c "
                cd '$BACKEND_DIR'
                [ -f package-lock.json ] && npm ci || npm install
                npx prisma generate
                npx prisma migrate deploy
              "

              # ---------- ec2-user: start app under PM2 ----------
              runuser -l ec2-user -c "
                cd '$BACKEND_DIR'
                pm2 start server.js --name dryseq-$STAGE-backend --update-env
                pm2 save
              "

              # ---------- ROOT: enable PM2 at boot ----------
              pm2 startup systemd -u ec2-user --hp /home/ec2-user

              echo "UserData complete."
            - {
              FrontendBucketName: !If [ CreateBuckets, !Ref FrontendBucket, !Ref ExistingFrontendBucketName ],
              UploadsBucketName: !If [ CreateBuckets, !Ref UploadsBucket, !Ref ExistingUploadsBucketName ]
            }
  
  DrySeqEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  DrySeqEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref DrySeqBackend
      EIP: !Ref DrySeqEIP

Outputs:

  FrontendBucketURL:
    Description: URL to access the hosted React frontend
    Value: !Sub
      - "http://${BucketName}.s3-website-${AWS::Region}.amazonaws.com"
      - { BucketName: !If [ CreateBuckets, !Ref FrontendBucket, !Ref ExistingFrontendBucketName ] }

  EC2PublicIP:
    Description: IP address of the backend EC2 server
    Value: !GetAtt DrySeqBackend.PublicIp

  RDSHost:
    Description: RDS PostgreSQL host
    Value: !GetAtt DrySeqDB.Endpoint.Address

  InstancePublicIP:
    Description: "Public IP address of DrySeq EC2 instance"
    Value: !Ref DrySeqEIP
    Export:
      Name: !Sub "${AWS::StackName}-InstancePublicIP"

  FrontendBucketName:
    Description: Effective frontend bucket name (created or existing)
    Value: !If [ CreateBuckets, !Ref FrontendBucket, !Ref ExistingFrontendBucketName ]

  UploadsBucketName:
    Description: Effective uploads bucket name (created or existing)
    Value: !If [ CreateBuckets, !Ref UploadsBucket, !Ref ExistingUploadsBucketName ]
