# To deploy:
# aws cloudformation deploy \
#   --template-file dryseq-stack.yml \
#   --stack-name dryseq-stack \
#   --capabilities CAPABILITY_NAMED_IAM \
#   --parameter-overrides \
#       KeyPairName=my-key \
#       VPC=vpc-id \
#   --profile personal

AWSTemplateFormatVersion: '2010-09-09'
Description: DrySeq Infra - Frontend, Uploads, EC2 backend, RDS DB

Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair for SSH access
    Type: AWS::EC2::KeyPair::KeyName

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: User your default VPC or a specific one

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet for EC2 instance

  DbPrivateSubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two subnets in different AZs for RDS

  AL2023Ami:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

Resources:

  # === Secrets ===

  DrySeqDbMasterSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: dryseq/db/master
      GenerateSecretString:
        SecretStringTemplate: '{"username":"dryseqadmin"}'
        GenerateStringKey: password
        PasswordLength: 32
        ExcludePunctuation: true

  # === Subnets ===

  DrySeqDbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "DrySeq private DB subnets"
      SubnetIds: !Ref DbPrivateSubnetIds

  # === S3 Buckets ===

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dryseq-frontend-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"

  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dryseq-userdata-${AWS::AccountId}-${AWS::Region}"
      CorsConfiguration:
        CorsRules:
          - AllowedMethods: [GET, PUT]
            AllowedOrigins: ["*"]
            AllowedHeaders: ["*"]
            MaxAge: 3000

  # === IAM Role for EC2 ===

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: dryseq-ec2-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DrySeqUserdataAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # S3: app read/write in your userdata bucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:AbortMultipartUpload
                  - s3:ListBucket
                Resource:
                  - !Sub "${UploadsBucket.Arn}"
                  - !Sub "${UploadsBucket.Arn}/*"

              # Secrets Manager: read only the dryseq/* secrets
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:dryseq/*"

              # SSM Parameter Store: read only /dryseq/* parameters
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/dryseq/*"

              - Effect: Allow
                Action: [ kms:Decrypt ]
                Resource: "*"
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub "ssm.${AWS::Region}.amazonaws.com"

              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackResources
                  - cloudformation:ListStackResources
                Resource: "*"

              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # === Parameter Groups ===

  DrySeqDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: Parameter group for DrySeq Postgres17 DB
      Family: postgres17
      Parameters:
        log_min_messages: error

  # === Security Groups ===

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP + SSH
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres from EC2
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # === RDS PostgreSQL ===

  DrySeqDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: dryseq
      Engine: postgres
      EngineVersion: "17.5"
      MasterUsername: dryseqadmin
      MasterUserPassword: '{{resolve:secretsmanager:dryseq/db/master:SecretString:password}}'
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      PubliclyAccessible: false
      DBSubnetGroupName: !Ref DrySeqDbSubnetGroup
      VPCSecurityGroups:
        - !GetAtt DBSecurityGroup.GroupId
      DBParameterGroupName: !Ref DrySeqDBParameterGroup

  # === EC2 Instance ===

  DrySeqBackend:
    Type: AWS::EC2::Instance
    Metadata:
      UpdateMessage: "DrySeqBackend v0.0.2"
    Properties:
      InstanceType: t3.micro
      SubnetId: !Ref SubnetId
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !Ref AL2023Ami # Amazon Linux 2023 AMI (us-east-1)
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euxo pipefail

          # --- Log both stdout and stderr to a file for debugging ---
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1

          # --- System update and base tooling ---
          dnf -y update
          dnf -y remove nodejs || true
          dnf -y install git python3 python3-pip jq awscli postgresql17

          # --- Node.js 20 via NodeSource (Amazon Linux 2023) ---
          curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
          dnf -y install nodejs
          npm install -g pm2

          # --- Prepare app directory owned by ec2-user ---
          cd /home/ec2-user
          rm -rf DrySeq
          git clone --branch main https://github.com/dgellerup/DrySeq.git
          chown -R ec2-user:ec2-user /home/ec2-user/DrySeq

          # --- Fetch secrets (JWT from SSM, DB pass from Secrets Manager) ---
          JWT_SECRET=$(aws ssm get-parameter \
            --name /dryseq/jwt/secret \
            --with-decryption \
            --query Parameter.Value \
            --output text \
            --region ${AWS::Region})

          DB_PASS=$(aws secretsmanager get-secret-value \
            --secret-id dryseq/db/master \
            --query SecretString \
            --output text \
            --region ${AWS::Region} | jq -r .password)

          # --- Write .env for the backend (mode 600; readable by ec2-user) ---
          cat > /home/ec2-user/DrySeq/backend/.env <<EOF
          DATABASE_URL=postgresql://dryseqadmin:$DB_PASS@${DrySeqDB.Endpoint.Address}:5432/dryseq?schema=public
          AWS_REGION=${AWS::Region}
          USERDATA_BUCKET=${UploadsBucket}
          FRONTEND_ORIGINS=http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com,http://localhost:5173
          JWT_SECRET=$JWT_SECRET
          PORT=80
          EOF
          chown ec2-user:ec2-user /home/ec2-user/DrySeq/backend/.env
          chmod 600 /home/ec2-user/DrySeq/backend/.env

          # --- Allow non-root (ec2-user) Node to bind to port 80 ---
          setcap 'cap_net_bind_service=+ep' "$(readlink -f "$(command -v node)")" || true

          # --- Install backend deps & Prisma as ec2-user ---
          runuser -l ec2-user -c 'cd ~/DrySeq/backend && ( [ -f package-lock.json ] && npm ci || npm install )'
          runuser -l ec2-user -c 'cd ~/DrySeq/backend && npx prisma generate'
          runuser -l ec2-user -c 'cd ~/DrySeq/backend && npx prisma db push'

          # --- Optional Python libs for PCR scripting ---
          python3 -m pip install --upgrade pip
          python3 -m pip install biopython smart_open boto3

          # --- Start backend under PM2 as ec2-user on port 80, persist across reboots ---
          runuser -l ec2-user -c 'cd ~/DrySeq/backend && pm2 start server.js --name dryseq-backend --update-env'
          runuser -l ec2-user -c 'pm2 save'
          pm2 startup systemd -u ec2-user --hp /home/ec2-user

          echo "UserData complete."

  
  DrySeqEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  DrySeqEIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref DrySeqBackend
      EIP: !Ref DrySeqEIP

Outputs:

  FrontendBucketURL:
    Description: URL to access the hosted React frontend
    Value: !Sub "http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com"

  EC2PublicIP:
    Description: IP address of the backend EC2 server
    Value: !GetAtt DrySeqBackend.PublicIp

  RDSHost:
    Description: RDS PostgreSQL host
    Value: !GetAtt DrySeqDB.Endpoint.Address

  InstancePublicIP:
    Description: "Public IP address of DrySeq EC2 instance"
    Value: !Ref DrySeqEIP
    Export:
      Name: DrySeq-InstancePublicIP

  FrontendBucketName:
    Value: !Ref FrontendBucket
  
  UploadsBucketName:
    Value: !Ref UploadsBucket
